#!/usr/bin/env perl6

use v6;
use JSON::Tiny;

# Tokens that you'll need to pass a literal value into
my @literals = [
  'TYPE_NAME',
  'IDENTIFIER',
  'FLOATCONSTANT',
  'INTCONSTANT',
  'UINTCONSTANT',
  'BOOLCONSTANT',
  'FIELD_SELECTION'
];

# delimiter regex to a token name into components to then turn into a class or param name
my $delimiter = /
  '_' | # Underscore-delimited
  <?before 'ARRAY'> | # Heuristic: split around 'array' e.g. 'SAMPLERARRAY'
  <?before 'SAMPLER'> | # Heuristic: split before 'sampler' e.g. 'ISAMPLER'
  <?after \d> <?before 'D'> # Heuristic: split dimensions to get a capital D e.g. '2D'
/;

# Convert a rule name to a Scala class name
sub classify(Str $rule-name) {
  $rule-name.split($delimiter).map(*.lc.tc).join("");
}

# Convert a rule name into a Scala parameter name
sub paramify(Str $rule-name) {
  # If the rule name is all caps, keep the parameter name all caps so that it doesn't clash
  # with builtin keywords (e.g. RETURN vs return)
  return $rule-name if $rule-name ~~ /^^ <[A..Z_\d]>+ $$/;

  $rule-name.split($delimiter).pairs.map(-> $pair {
    if $pair.key == 0 {
      $pair.value.lc;
    } else {
      $pair.value.lc.tc;
    }
  }).join("");
}


# Generator to build Scala classes out of grammar rules
class RuleGenerator {
  has Str $.name;
  has @.formulations;
  has %.tokens;
  has Set $.implied;

  submethod BUILD(Str :$name, :@formulations, :%tokens) {
    $!name = $name;
    @!formulations = @formulations.map(*.Array);
    %!tokens = %tokens;
    $!implied = Set.new;


    # Populate the set of tokens that don't have to be passed in because they can be implied.
    # It isn't necessary to specify a param if it can be inferred by the other params.
    #
    # e.g. here, EQUAL is not necessary:
    #
    #   layout_qualifier_id
    #     IDENTIFIER
    #     IDENTIFIER EQUAL INTCONSTANT
    #     IDENTIFIER EQUAL UINTCONSTANT
    #
    # e.g. here, PLUS and DASH are necessary:
    #
    #   additive_expression
    #     multiplicative_expression
    #     additive_expression PLUS multiplicative_expression
    #     additive_expression DASH multiplicative_expression

    my @formulations-removed = @!formulations;

    # Iterate through params in order of uses (more common ones are more likely to be removable)
    my $param-counts = @!formulations.flatmap(*.flat).Bag;
    my @params = $param-counts.keys.sort({ $param-counts{$^b} cmp $param-counts{$^a} });
    for @params -> $p {
      next unless $p (elem) %!tokens;

      # Heuristic: if one token is all that's left, we shouldn't remove it, unless it's something like a semicolon
      if $p eq 'SEMICOLON' || [$p] !~~ @formulations-removed.any {
        my $new-implied = $!implied (|) Set.new($p);
        my @new-formulations-removed = @formulations-removed.map(*.grep({$_ !(elem) $new-implied}).Array);
        my @new-formulations-removed-strings = @new-formulations-removed.map(*.join(' '));

        # Start with all the rules of the same length. If you remove this param from all
        # of them, and it was present in all of them, then it was not necessary, as long
        # as removal did not produce any duplicate rules
        if @new-formulations-removed-strings.Set.elems == @new-formulations-removed-strings.elems {
          $!implied = $new-implied;
          @formulations-removed = @new-formulations-removed;
        }
      }
    }
  }

  method make-class-def {
    "class {classify($.name)} private (_source: String)";
  }

  method make-signature(@formulation) {
    my $counts = Bag.new;
    my @param-defs = @formulation.map(-> $p {
      if $p (elem) $.implied {
        Nil;
      } else {
        $counts = $counts (+) $p;
        my Str $suffix = $counts{$p} > 1 ?? $counts{$p}.Str !! '';
        "{paramify($p)}{$suffix}: {classify($p)}";
      }
    }).grep(*.defined);

    "def this({@param-defs.join(', ')})";
  }

  method make-body(@formulation) {
    my $counts = Bag.new;
    my @formulation-strs = @formulation.map(-> $p {
      if $p (elem) %.tokens {
        %.tokens{$p} ~ ' ';
      } else {
        $counts = $counts (+) $p;
        my Str $suffix = $counts{$p} > 1 ?? $counts{$p}.Str !! '';
        '${' ~ paramify($p) ~ $suffix ~ '.source()}';
      }
    });
    'this(s"' ~ @formulation-strs.join("") ~ '")';
  }

  method source-getter {
    'def source() = _source';
  }

  method source() {
    return self.make-class-def ~ " \{\n" ~
      @.formulations
        .map( -> $f { '  ' ~ self.make-signature($f) ~ ' = ' ~ self.make-body($f) } )
        .join("\n") ~
      "\n  " ~ self.source-getter ~
      "\n\}\n";
  }
}

# Generator to build Scala classes out of grammar tokens
class TokenGenerator {
  has Str $.name;

  method source() {
    return qq:to/SOURCE/;
      class {classify($.name)}
      SOURCE
  }
}

# Generator to build Scala classes out of grammar literals
class LiteralGenerator {
  has Str $.name;

  method source() {
    return qq:to/SOURCE/;
      class {classify($.name)}(value: String) \{
        def source() = s"\$\{value\} "
      \}
      SOURCE
  }
}




# Parser for the grammar text file
grammar GrammarFile {
  token TOP {
    ^ <node>* $
  }

  proto token node { * }

  token node:sym<comment> {
    '//' <-[\n]>+ \n
  }

  token node:sym<rule> {
    <rule-name> ':' \n
    <formulation>+
  }

  token formulation {
    \s* [ <rule-name>+ % ' '+ ] \n
  }

  token rule-name {
    \w+
  }
}

# Class to convert a grammar match to Scala class generators
class GrammarActions {
  has %.tokens;

  method TOP($/) {
    $/.make($<node>.map(*.made).grep(*.defined));
  }

  method node:sym<comment>($/) {
    $/.make(Nil);
  }

  method node:sym<rule>($/) {
    $/.make(RuleGenerator.new(
        name => $<rule-name>.Str,
        formulations => ($<formulation> || []).map(*.made),
        tokens => $.tokens));
  }

  method formulation($/) {
    $/.make($<rule-name>.map(*.Str).grep(* ne 'EMPTY'));
  }
}

subset File of Str where {$_.IO ~~ :e};

#| Creates codegen classes from the GLES 3.0 grammar.
multi sub MAIN(File :$grammar-file!, File :$tokens-file!, Str :$output-file!) {
  my $contents = $grammar-file.IO.slurp;
  my %tokens = from-json($tokens-file.IO.slurp);
  my $fh = open $output-file, :w;
  my @rules = GrammarFile.parse(
      $contents,
      actions => GrammarActions.new(tokens => %tokens)).made;

  $fh.say: "// DO NOT MODIFY: these classes are automatically generated!\n";

  $fh.say: "\npackage calder.generate";

  $fh.say: "\n// Tokens\n";
  $fh.say: %tokens.keys.map(-> $name {
    TokenGenerator.new(name => $name).source()
  }).join("\n\n");

  $fh.say: "\n// Literals\n";
  $fh.say: @literals.map(-> $name {
    LiteralGenerator.new(name => $name).source()
  }).join("\n\n");

  $fh.say: "\n// Rules\n";
  $fh.say: @rules.map(*.source).join("\n\n");

  $fh.close;
}

multi sub MAIN(Str :$grammar-file!, File :$tokens-file!, Str :$output-file!) is hidden-from-USAGE {
  say "Could not find the grammar file!";
}

multi sub MAIN(Str :$grammar-file!, Str :$tokens-file!, Str :$output-file!) is hidden-from-USAGE {
  say "Could not find the tokens file!";
}
